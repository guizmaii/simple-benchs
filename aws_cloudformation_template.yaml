# Adapted from: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-cluster.html#aws-resource-msk-cluster--examples
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PrivateOne:
      CIDR: 10.0.1.0/24
    PrivateTwo:
      CIDR: 10.0.2.0/24
    PrivateThree:
      CIDR: 10.0.3.0/24
  RegionAMI:
    ap-southeast-2:
      HVM64: ami-0119aa4d67e59007c
Resources:
  SimpleBenchsVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Name
          Value: SimpleBenchsVPC
  SimpleBenchsPublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref SimpleBenchsVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SimpleBenchsPublicSubnetOne
  SimpleBenchsPrivateSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref SimpleBenchsVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateOne
        - CIDR
      Tags:
        - Key: Name
          Value: SimpleBenchsPrivateSubnetOne
  SimpleBenchsPrivateSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref SimpleBenchsVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateTwo
        - CIDR
      Tags:
        - Key: Name
          Value: SimpleBenchsPrivateSubnetTwo
  SimpleBenchsPrivateSubnetThree:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref SimpleBenchsVPC
      CidrBlock: !FindInMap
        - SubnetConfig
        - PrivateThree
        - CIDR
      Tags:
        - Key: Name
          Value: SimpleBenchsPrivateSubnetThree
  SimpleBenchsInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  SimpleBenchsGatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SimpleBenchsVPC
      InternetGatewayId: !Ref SimpleBenchsInternetGateway
  SimpleBenchsPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SimpleBenchsVPC
  SimpleBenchsPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: SimpleBenchsGatewayAttachement
    Properties:
      RouteTableId: !Ref SimpleBenchsPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SimpleBenchsInternetGateway
  SimpleBenchsPublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SimpleBenchsPublicSubnetOne
      RouteTableId: !Ref SimpleBenchsPublicRouteTable
  SimpleBenchsPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SimpleBenchsVPC
  SimpleBenchsPrivateSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref SimpleBenchsPrivateRouteTable
      SubnetId: !Ref SimpleBenchsPrivateSubnetOne
  SimpleBenchsPrivateSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref SimpleBenchsPrivateRouteTable
      SubnetId: !Ref SimpleBenchsPrivateSubnetTwo
  SimpleBenchsPrivateSubnetThreeRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref SimpleBenchsPrivateRouteTable
      SubnetId: !Ref SimpleBenchsPrivateSubnetThree
  SimpleBenchsKafkaClientInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref SimpleBenchsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  SimpleBenchsMSKSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MSK Cluster Security Group
      VpcId: !Ref SimpleBenchsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          SourceSecurityGroupId: !GetAtt
            - SimpleBenchsKafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9094
          ToPort: 9094
          SourceSecurityGroupId: !GetAtt
            - SimpleBenchsKafkaClientInstanceSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          SourceSecurityGroupId: !GetAtt
            - SimpleBenchsKafkaClientInstanceSecurityGroup
            - GroupId
  SimpleBenchsKafkaClientEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m5.large
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref SimpleBenchsEC2InstanceProfile
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      SubnetId: !Ref SimpleBenchsPublicSubnetOne
      SecurityGroupIds:
        - !GetAtt
          - SimpleBenchsKafkaClientInstanceSecurityGroup
          - GroupId
      ImageId: !FindInMap
        - RegionAMI
        - !Ref 'AWS::Region'
        - HVM64
      Tags:
        - Key: Name
          Value: SimpleBenchsKafkaClientInstance
      UserData: !Base64 >
        #!/bin/bash

        yum update -y

        yum install python3.7 git htop nmap curl which -y

        curl -s "https://get.sdkman.io" | bash

        source "/home/ec2-user/.sdkman/bin/sdkman-init.sh"

        sdk install java 8.0.232.hs-adpt

        sdk install sbt

        sdk install maven

        # -------------------------- #
        # BEGIN ---- Schema Registry #
        # -------------------------- #

        rpm --import https://packages.confluent.io/rpm/5.3/archive.key

        cat <<EOF > /etc/yum.repos.d/confluent.repo
        [Confluent.dist]
        name=Confluent repository (dist)
        baseurl=https://packages.confluent.io/rpm/5.3/7
        gpgcheck=1
        gpgkey=https://packages.confluent.io/rpm/5.3/archive.key
        enabled=1

        [Confluent]
        name=Confluent repository
        baseurl=https://packages.confluent.io/rpm/5.3
        gpgcheck=1
        gpgkey=https://packages.confluent.io/rpm/5.3/archive.key
        enabled=1
        EOF

        yum clean all

        yum install confluent-platform-2.12 -y

        # ------------------------ #
        # END ---- Schema Registry #
        # ------------------------ #

        yum erase awscli -y

        cd /home/ec2-user

        echo "export PATH=.local/bin:$PATH" >> .bash_profile

        mkdir kafka

        mkdir mm

        cd kafka

        wget https://archive.apache.org/dist/kafka/2.2.1/kafka_2.12-2.2.1.tgz

        tar -xzf kafka_2.12-2.2.1.tgz

        cd /home/ec2-user

        wget https://bootstrap.pypa.io/get-pip.py

        su -c "python3.7 get-pip.py --user" -s /bin/sh ec2-user

        su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh
        ec2-user

        su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh
        ec2-user

        chown -R ec2-user ./kafka

        chgrp -R ec2-user ./kafka

        chown -R ec2-user ./mm

        chgrp -R ec2-user ./mm
  SimpleBenchsEC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonMSKFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
  SimpleBenchsEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: EC2MSKCFProfile
      Roles:
        - !Ref SimpleBenchsEC2Role
  SimpleBenchsMSKCluster:
    Type: 'AWS::MSK::Cluster'
    Properties:
      BrokerNodeGroupInfo:
        ClientSubnets:
          - !Ref SimpleBenchsPrivateSubnetOne
          - !Ref SimpleBenchsPrivateSubnetTwo
          - !Ref SimpleBenchsPrivateSubnetThree
        InstanceType: kafka.m5.large
        SecurityGroups:
          - !GetAtt
            - SimpleBenchsMSKSecurityGroup
            - GroupId
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 2000
      ClusterName: SimpleBenchsMSKCluster
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT
          InCluster: true
      EnhancedMonitoring: PER_TOPIC_PER_BROKER
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: 3
Outputs:
  VPCId:
    Description: The ID of the VPC created
    Value: !Ref SimpleBenchsVPC
  PublicSubnetOne:
    Description: The name of the public subnet created
    Value: !Ref SimpleBenchsPublicSubnetOne
  PrivateSubnetOne:
    Description: The ID of private subnet one created
    Value: !Ref SimpleBenchsPrivateSubnetOne
  PrivateSubnetTwo:
    Description: The ID of private subnet two created
    Value: !Ref SimpleBenchsPrivateSubnetTwo
  PrivateSubnetThree:
    Description: The ID of private subnet three created
    Value: !Ref SimpleBenchsPrivateSubnetThree
  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value: !GetAtt
      - SimpleBenchsMSKSecurityGroup
      - GroupId
  KafkaClientEC2InstancePublicDNS:
    Description: The Public DNS for the MirrorMaker EC2 instance
    Value: !GetAtt
      - SimpleBenchsKafkaClientEC2Instance
      - PublicDnsName
  MSKClusterArn:
    Description: The Arn for the MSKMMCluster1 MSK cluster
    Value: !Ref SimpleBenchsMSKCluster
